---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not ((lookup('env', 'MOLECULE_DEBUG') | bool) or (molecule_yml.provisioner.log | default(false) | bool)) }}"
  vars:
    ci_branch_name: "{{ lookup('env', 'CI_COMMIT_REF_NAME') }}"

    # Azure VM images details
    vm_admin_username: "{{ lookup('env', 'WINRM_ADMIN_ACC') | default('vm-admin', true) }}"
    vm_admin_password: "{{ lookup('env', 'WINRM_ADMIN_PWD') | default('M0leCule123!', true) }}"

    keypair_name: "molecule-key_\
      {{ lookup('env','MOLECULE_PROJECT_DIRECTORY').split('/')[-1] }}_\
      {{ lookup('env','MOLECULE_SCENARIO_NAME') }}"
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"

    ssh_port: 22
    winrm_port: 5986

    # Azure storage details for Terraform backend
    az_resource_group_name: "epm-ldi" # hardcode!!!
    az_storage_account_name: "storage11490" # hardcode!!!
    az_container: "gitlab-ci-tfstate" # hardcode!!!
    az_container_key: "tfstate-" # hardcode!!!

    azure_images:
      linux:
        centos7:
          publisher: OpenLogic
          offer: CentOS
          sku: '7.7' # hardcoded! Currently can't find latest minor version using azure_rm_virtualmachineimage_facts module
          version: latest
        centos6:
          publisher: OpenLogic
          offer: CentOS
          sku: '6.10' # hardcoded! Currently can't find latest minor version using azure_rm_virtualmachineimage_facts module
          version: latest
        ubuntu16:
          publisher: Canonical
          offer: UbuntuServer
          sku: "16.04-LTS"
          version: latest
        ubuntu18:
          publisher: Canonical
          offer: UbuntuServer
          sku: "18.04-LTS"
          version: latest
        debian9:
          publisher: credativ
          offer: Debian
          sku: '9'
          version: latest
      windows:
        windows2016core:
          publisher: MicrosoftWindowsServer
          offer: WindowsServer
          sku: "2016-Datacenter-Server-Core-smalldisk"
          version: latest
        windows2019core:
          publisher: MicrosoftWindowsServer
          offer: WindowsServer
          sku: "2019-Datacenter-Core-smalldisk"
          version: latest

  tasks:
    - name: debug CI_COMMIT_REF_NAME
      debug:
        var: ci_branch_name

    - name: Generate keypair
      openssh_keypair:
        # todo: must be protected!!!
        path: /tmp/id_ssh_rsa
        force: true
      register: keypair

    - name: Persist the keypair
      copy:
        dest: "{{ keypair_path }}"
        src: "{{ keypair.filename }}"
        mode: 0600
      when: keypair.changed | bool

    # Get unique idempotent name for VMSS, in Azure VMSS name == ID
    # for VMSS name cannot be longer than 15 characters
    # VM name sample "tst-c03a89e9-ss"
    - name: Set unique VMSS name dicts
      set_fact:
        unique_vmss_name: >-
          {{ unique_vmss_name | default({})
            | combine({ item.name: 'tst-' + ((item.name + '-' + ci_branch_name) | to_uuid)[:8] }) }}
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"

    # As we're running terraform states in loop, it confuses terraform workspaces
    # Therefore we will run each tf state from a separate directory
    - name: Duplicate Terraform directories under unique names
      synchronize:
        src: "tf/"
        dest: "/tmp/tf-{{ unique_vmss_name[item.name] }}/"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create VM Scale Set(s)
      terraform:
        project_path: "/tmp/tf-{{ unique_vmss_name[item.name] }}/"
        workspace: "{{ unique_vmss_name[item.name] }}"
        force_init: true
        backend_config:
          resource_group_name: "{{ az_resource_group_name }}"
          storage_account_name: "{{ az_storage_account_name }}"
          container_name: "{{ az_container }}"
          key: "{{ az_container_key }}"
        variables:
          vmss_name: "{{ unique_vmss_name[item.name] }}"
          resource_group_name: "{{ item.az_resource_group_name }}"
          location: "{{ item.az_location }}"
          virtual_network_name: "{{ item.az_virtual_network_name }}"
          subnet_name: "{{ item.az_subnet_name }}"
          network_security_group: "{{ item.az_network_security_group }}"
          vm_size: "{{ item.vm_size }}"
          disk_type: Standard_LRS # Standard HDD, cheap :)
          admin_username: "{{ vm_admin_username }}"
          admin_password: "{{ ('windows' in item.groups) | ternary(vm_admin_password, omit) }}"
          ssh_port: "{{ ('windows' in item.groups) | ternary(omit, ssh_port) }}"
          winrm_port: "{{ ('windows' in item.groups) | ternary(winrm_port, omit) }}"
          ssh_public_key: "{{ ('windows' in item.groups) | ternary(omit, keypair.public_key) }}" # we have to pass param for Linux VMs only
          img_offer: "{{ (('windows' in item.groups) | ternary(azure_images.windows, azure_images.linux))[item.platform]['offer'] }}"
          img_publisher: "{{ (('windows' in item.groups) | ternary(azure_images.windows, azure_images.linux))[item.platform]['publisher'] }}"
          img_sku: "{{ (('windows' in item.groups) | ternary(azure_images.windows, azure_images.linux))[item.platform]['sku'] }}"
          img_version: "{{ (('windows' in item.groups) | ternary(azure_images.windows, azure_images.linux))[item.platform]['version'] }}"
          tag_name: "{{ item.name }}-{{ ci_branch_name }}"
          tag_instance: "{{ item.name }}"
          tag_os: "{{ (('windows' in item.groups) | ternary('Windows', 'Linux')) }}"
      loop: "{{ molecule_yml.platforms }}"
      register: vmss
      async: 7200
      poll: 0

    - name: Wait for VMSS creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ vmss.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: vmss_create
      until: vmss_create.finished
      delay: 20
      retries: 300

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict:
          instance: "{{ item.outputs.vmss_tag_instance.value }}"
          address: "{{ item.outputs.vmss_private_ip.value }}"
          public_ip: "{{ item.outputs.vmss_public_fqdn.value }}"
          user: "{{ vm_admin_username }}" # common for all OSes, Azure specific
          port: "{{ ('windows' in item.item.item.groups) | ternary(winrm_port, ssh_port) }}"
          identity_file: "{{ keypair_path }}"
          instance_ids: "{{ item.outputs.vmss_id.value }}"
          connection: "{{ ('windows' in item.item.item.groups) | ternary('winrm', 'ssh') }}"
      loop: "{{ vmss_create.results }}"
      loop_control:
        label: "{{ item.item.item.name }}"
      register: instance_config_dict
      when: vmss_create.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: >-
          {{ instance_config_dict.results
            | map(attribute='ansible_facts.instance_conf_dict') | list }}
      when: vmss_create.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: vmss_create.changed | bool

    - name: Wait for connection
      wait_for:
        port: "{{ item.port }}"
        host: "{{ item.address }}"
        delay: 2
        connect_timeout: 2
        timeout: 320
      loop: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"
